---
title: "Week 8 Lab: Phenology & NDVI"
format: html
editor_options: 
  chunk_output_type: console
---
# Overview

In this lab we are analyzing plant phenology near the Santa Clara River which flows from Santa Clarita to Ventura. We will investigate the phenology of the following plant communities:

- **Riparian forests**: grow along the river, dominated by winter deciduous cottonwood and willow trees
- **Grasslands**: grow in openspaces, dominated by drought deciduous grasses
- **Chaparral shrublands**: grow in more arid habitats, dominated by evergreen shrubs

To investigate the phenology of these plant communities we will use a time series of Landsat imagery and polygons identifying the locations of study sites within each plant community.

Our primary goal is to compare seasonal patterns across vegetation communities. To do so, we will:

- Convert spectral reflectance into a measure of vegetation productivity (NDVI)
- Calculate NDVI throughout the year
- Summarize NDVI values within vegetation communities
- Visualize changes in NDVI within vegetation communities


# Background

Phenology is the timing of life history events. Important phenological events for plants involve the growth of leaves, flowering, and senescence (death of leaves). Plants species adapt the timing of these events to local climate conditions to ensure successful reproduction. Subsequently, animal species often adapt their phenology to take advantage of food availability. As the climate shifts this synchronization is being thrown out of whack. Shifts in phenology are therefore a common yardstick of understanding how and if ecosystems are adjusting to climate change.

Plant species may employ the following phenological strategies:

- **Winter deciduous**: lose leaves in the winter, grow new leaves in the spring
- **Drought deciduous**: lose leaves in the summer when water is limited
- **Evergreen**: maintain leaves year-round

# Workflow

## 1. Set Up
```{r}
# Load libraries
library(terra)
library(sf)
library(tidyverse)
library(here)
library(tmap)
```

## 2. Create function to compute NDVI
```{r}
# Definte NDVI function
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}

```

## 3. Compute NDVI for a single scene

We have 8 scenes collected by Landsat’s OLI sensor on 8 different days throughout the year.

Let’s start by loading in the first scene collected on June 12, 2018:
```{r}
# Load landsat data for 2018-06-12
landsat_20180612 <- terra::rast(here("data", "landsat_20180612.tif"))
```

Let’s update the names of the layers to match the spectral bands they correspond to:
```{r}
names(landsat_20180612) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
```

Now we can apply the NDVI function we created to compute NDVI for this scene using the lapp() function.

- The lapp() function applies a function to each cell using layers as arguments.
- Therefore, we need to tell lapp() which layers (or bands) to pass into the function.

The NIR band is the 4th layer and the red band is the 3rd layer in our raster. In this case, because we defined the NIR band as the first argument and the red band as the second argument in our function, we tell lapp() to use the 4th layer first and 3rd layer second.

```{r}
ndvi_20180612 <- lapp(landsat_20180612[[c(4, 3)]], fun = ndvi_fun)

# Look at the NDVI image
tm_shape(ndvi_20180612) +
  tm_raster(title = "NDVI") +
  tm_layout(legend.outside = TRUE)
```

## 4. Compute NDVI for all scenes

```{r}
# Clear our environment - start from scratch
rm(list = ls())

# Define NDVI function
ndvi_fun <- function(nir, red){
  (nir - red) / (nir + red)
}
```

```{r}
# Define function for workflow

create_ndvi_layer <- function(i){
  
  # Step 1: read in scene
  landsat <- terra::rast(files[i])
  
  # Step 2: rename bands in scene
  names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")
  
  # Step 3: compute NDVI
  ndvi <- lapp(landsat[[c(4, 3)]], fun = ndvi_fun)
  
  return(ndvi)
}

```

```{r}
# Create a list of files that we want to pass to our function
# list.files allows you to list all files in a directory
files <- list.files(here("data"), pattern = "*.tif", full.names = TRUE)
```

```{r}
# test out the function
test <- create_ndvi_layer(1)
```


Now we can use our function to create a NDVI layer for each scene and stack them into a single rasterstack. And then update layer names to match date:
```{r}
# Create NDVI raster stack with all scenes
all_ndvi <- c(create_ndvi_layer(1),
              create_ndvi_layer(2),
              create_ndvi_layer(3),
              create_ndvi_layer(4),
              create_ndvi_layer(5),
              create_ndvi_layer(6),
              create_ndvi_layer(7),
              create_ndvi_layer(8))  # could use a for loop here 

names(all_ndvi) <- c("2018-06-12",
                     "2018-08-15",
                     "2018-10-18",
                     "2018-11-03",
                     "2019-01-22",
                     "2019-02-23",
                     "2019-04-12",
                     "2019-07-01")
```

```{r}
# to avoid all that copy and pasting:
file_names <- data.frame(file_name = files) |>  # put the file names into a data frame
  mutate(date = str_sub(file_name, start = -12L, end = -5L))  # use a string operation to pull the date from the file path

names(all_ndvi) <- file_names$date
```

## Compare NDVI Across Vegetation Communities

### Get data on veg communities
```{r}
sites <- st_read(here("data", "study_sites.shp"))

tm_shape(all_ndvi[[1]]) +
  tm_raster() +
  tm_shape(sites) +
  tm_polygons()
  
```

### Extract NDVI at study sites

Now we want to find the average NDVI within each study site. The output of terra::extract() is a data.frame with rows that match the study site data set, so we bind the results to the original data set.

```{r}
sites_ndvi <- terra::extract(all_ndvi, sites, fun = "mean")  # output is not tidy ):

sites_annotated <- cbind(sites, sites_ndvi)
```

```{r}
sites_clean <- sites_annotated |>
  # initial cleaning
  select(-ID) |>
  st_drop_geometry() |>
  # reformat data frame
  pivot_longer(!study_site) |>
  rename("NDVI" = value) |>
  # create data component attributes
  mutate("year" = str_sub(name, start = 2, end = 5),
         "month" = str_sub(name, 6, 7),
         "day" = str_sub(name, 8, 10)) |>
  # combine date elements
  unite("date", 4:6, sep = "-") |>
  # change date column to type date
  mutate("date" = lubridate::as_date(date)) |>
  select(-name) |>
  # renaming to combine study sites by veg type
  mutate("veg_type" = case_when(study_site == "forest1" ~ "forest",
                                study_site == "forest2" ~ "forest",
                                study_site == "forest3" ~ "forest",
                                study_site == "grassland" ~ "grassland",
                                study_site == "chaparral" ~ "chaparral")) |>
  group_by(veg_type, date) |>
  summarize("NDVI" = mean(NDVI, na.rm = TRUE))
  
```

```{r}
# Make our final plot
ggplot(sites_clean,
       aes(x = date, y = NDVI, col = veg_type)) +
  geom_line() +
  geom_point() +
  theme_minimal() +
  labs(x = " ",
       y = "Normalized Difference Vegetation Index (NDVI)",
       col = "Vegetation type",
       title = "Seasonal cycle of vegetation productivity")

```

**chaparral:** NDVI stays relatively constant throughout the year
**forest:** NDVI is lowest in the winter and highest in the summer
**grassland:** NDVI is highest in the winter and lowest in the summer

